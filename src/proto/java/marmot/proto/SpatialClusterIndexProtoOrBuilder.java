// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marmot.internal.proto

package marmot.proto;

public interface SpatialClusterIndexProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:marmot.optor.proto.SpatialClusterIndexProto)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * 인덱스 파일이 저장된 파일 이름
   * </pre>
   *
   * <code>string pack_id = 1;</code>
   */
  java.lang.String getPackId();
  /**
   * <pre>
   * 인덱스 파일이 저장된 파일 이름
   * </pre>
   *
   * <code>string pack_id = 1;</code>
   */
  com.google.protobuf.ByteString
      getPackIdBytes();

  /**
   * <pre>
   * 파일내 블럭 번호
   * </pre>
   *
   * <code>int32 block_no = 2;</code>
   */
  int getBlockNo();

  /**
   * <pre>
   * 클러스터 인덱스 식별자
   * </pre>
   *
   * <code>string quad_key = 3;</code>
   */
  java.lang.String getQuadKey();
  /**
   * <pre>
   * 클러스터 인덱스 식별자
   * </pre>
   *
   * <code>string quad_key = 3;</code>
   */
  com.google.protobuf.ByteString
      getQuadKeyBytes();

  /**
   * <pre>
   * 클러스터 사각 영역
   * </pre>
   *
   * <code>.marmot.proto.EnvelopeProto tile_bounds = 4;</code>
   */
  boolean hasTileBounds();
  /**
   * <pre>
   * 클러스터 사각 영역
   * </pre>
   *
   * <code>.marmot.proto.EnvelopeProto tile_bounds = 4;</code>
   */
  marmot.proto.EnvelopeProto getTileBounds();
  /**
   * <pre>
   * 클러스터 사각 영역
   * </pre>
   *
   * <code>.marmot.proto.EnvelopeProto tile_bounds = 4;</code>
   */
  marmot.proto.EnvelopeProtoOrBuilder getTileBoundsOrBuilder();

  /**
   * <pre>
   * 클러스터에 포함된 데이터의 MBR
   * </pre>
   *
   * <code>.marmot.proto.EnvelopeProto data_bounds = 5;</code>
   */
  boolean hasDataBounds();
  /**
   * <pre>
   * 클러스터에 포함된 데이터의 MBR
   * </pre>
   *
   * <code>.marmot.proto.EnvelopeProto data_bounds = 5;</code>
   */
  marmot.proto.EnvelopeProto getDataBounds();
  /**
   * <pre>
   * 클러스터에 포함된 데이터의 MBR
   * </pre>
   *
   * <code>.marmot.proto.EnvelopeProto data_bounds = 5;</code>
   */
  marmot.proto.EnvelopeProtoOrBuilder getDataBoundsOrBuilder();

  /**
   * <pre>
   * 클러스터의 포함된 데이터의 갯수
   * </pre>
   *
   * <code>int32 count = 6;</code>
   */
  int getCount();

  /**
   * <pre>
   * 클러스터 소속 데이터의 갯수
   * </pre>
   *
   * <code>int32 owned_count = 7;</code>
   */
  int getOwnedCount();

  /**
   * <pre>
   * 클러스의 블럭 내 시작 오프셋
   * </pre>
   *
   * <code>int64 start_offset = 8;</code>
   */
  long getStartOffset();

  /**
   * <pre>
   * 클러스터의 길이 (byte)
   * </pre>
   *
   * <code>int64 length = 9;</code>
   */
  long getLength();
}
